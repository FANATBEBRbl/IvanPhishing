import streamlit as st
import requests
import re

st.title("–§–∏—à–∏–Ω–≥-–∞—Ç–∞–∫–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏—Å—å–º–∞")

# –û–¥–Ω–æ –ø–æ–ª–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–æ–π
message = st.text_area("–°–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Å—ã–ª–∫—É):", height=200)

def contains_link(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ"""
    url_pattern = r'https?://[^\s]+'
    return bool(re.search(url_pattern, text))

if st.button("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"):
    if message:
        if contains_link(message):
            try:
                response = requests.post(
                    "http://localhost:8000/check-message/",
                    json={"message": message}
                )
                result = response.json()
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—è–º–∏
                if result["success"]:
                    st.success("‚úÖ –£—Å–ø–µ—Ö! –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É!")
                else:
                    st.error("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
                
                # –î–µ—Ç–∞–ª–∏ —â–∏—Ç–∞
                st.subheader("üõ°Ô∏è –£–º–Ω—ã–π –©–∏—Ç")
                shield_details = result["shield"]["details"]
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–°—Ç–∞—Ç—É—Å", result["shield"]["status"])
                    st.metric("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{shield_details['–±–∞–ª–ª_–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏']}/100")
                with col2:
                    if shield_details["–Ω–∞–π–¥–µ–Ω–Ω—ã–µ_–∂–µ—Å—Ç–∫–∏–µ_—Ç—Ä–∏–≥–≥–µ—Ä—ã"]:
                        st.error(f"üö® –ñ–µ—Å—Ç–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã: {', '.join(shield_details['–Ω–∞–π–¥–µ–Ω–Ω—ã–µ_–∂–µ—Å—Ç–∫–∏–µ_—Ç—Ä–∏–≥–≥–µ—Ä—ã'])}")
                    if shield_details["–Ω–∞–π–¥–µ–Ω–Ω—ã–µ_–º—è–≥–∫–∏–µ_—Ç—Ä–∏–≥–≥–µ—Ä—ã"]:
                        st.warning(f"‚ö†Ô∏è –ú—è–≥–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã: {', '.join(shield_details['–Ω–∞–π–¥–µ–Ω–Ω—ã–µ_–º—è–≥–∫–∏–µ_—Ç—Ä–∏–≥–≥–µ—Ä—ã'])}")
                with col3:
                    st.write(f"**–£–≥—Ä–æ–∂–∞—é—â–∏–π —Ç–æ–Ω:** {'‚ö†Ô∏è' if shield_details['—É–≥—Ä–æ–∂–∞—é—â–∏–π_—Ç–æ–Ω'] else '‚úÖ'}")
                    st.write(f"**–¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å:** {'‚ö†Ô∏è' if shield_details['—Ç–æ–∫—Å–∏—á–Ω—ã–π'] else '‚úÖ'}")
                    st.write(f"**–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π URL:** {'‚ö†Ô∏è' if shield_details['–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π_—É—Ä–ª'] else '‚úÖ'}")
                
                # –î–µ—Ç–∞–ª–∏ –£–º–Ω–æ–≥–æ –ò–≤–∞–Ω–∞
                st.subheader("üß† –£–º–Ω—ã–π –ò–≤–∞–Ω")
                ivan_details = result["ivan"]["details"]
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–†–µ—à–µ–Ω–∏–µ", result["ivan"]["status"])
                    st.metric("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∏–∫–∞", f"{ivan_details['–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å_–∫–ª–∏–∫–∞']}%")
                    st.metric("–≠–º–æ—Ü–∏—è", ivan_details["–æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–∞—è_—ç–º–æ—Ü–∏—è"])
                
                with col2:
                    st.write("**–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã:**")
                    triggers = ivan_details["–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ_—Ç—Ä–∏–≥–≥–µ—Ä—ã"]
                    for trigger, active in triggers.items():
                        st.write(f"‚Ä¢ {trigger}: {'‚úÖ' if active else '‚ùå'}")
                
                with col3:
                    st.write("**–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:**")
                    negatives = ivan_details["–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ_—Ñ–∞–∫—Ç–æ—Ä—ã"]
                    for factor, active in negatives.items():
                        st.write(f"‚Ä¢ {factor}: {'‚ùå' if active else '‚úÖ'}")
                
                # –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é
                actions = ivan_details["–ø—Ä–∏–∑—ã–≤—ã_–∫_–¥–µ–π—Å—Ç–≤–∏—é"]
                if any(actions.values()):
                    st.info("**–ù–∞–π–¥–µ–Ω—ã –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é:**")
                    for category, phrases in actions.items():
                        if phrases:
                            st.write(f"‚Ä¢ {category}: {', '.join(phrases)}")
                
                # JSON –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
                with st.expander("üîç –ü–æ–ª–Ω—ã–π JSON –æ—Ç–≤–µ—Ç"):
                    st.json(result)
                    
            except requests.exceptions.ConnectionError:
                st.error("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FastAPI –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        else:
            st.warning("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Å—ã–ª–∫—É (http:// –∏–ª–∏ https://)")
    else:
        st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")