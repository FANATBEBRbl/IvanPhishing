#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Render
"""
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from app.models import is_phishing, will_click
from app.schemas import MessageRequest
import os

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="AI/ML Phishing Detection System",
    description="–°–∏—Å—Ç–µ–º–∞ –æ–±—Ö–æ–¥–∞ AI/ML –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ñ–∏—à–∏–Ω–≥-–∞—Ç–∞–∫",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API"""
    return {
        "message": "üõ°Ô∏è AI/ML Phishing Detection System is running!",
        "status": "online",
        "version": "1.0.0",
        "endpoints": {
            "check_message": "/check-message/",
            "docs": "/docs",
            "health": "/health"
        }
    }

@app.get("/health")
async def health_check():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "service": "phishing-detector",
        "timestamp": "2025-06-05"
    }

@app.post("/check-message/")
async def check_message(request: MessageRequest):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ñ–∏—à–∏–Ω–≥
    
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–≤—É–º—è –º–æ–¥–µ–ª—è–º–∏:
    - –©–∏—Ç: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–∏—à–∏–Ω–≥–æ–º
    - –ò–≤–∞–Ω: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–ª–∏–∫–Ω–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å—Å—ã–ª–∫—É
    """
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º
        full_text = request.message
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        shield_result = is_phishing(full_text)
        ivan_result = will_click(full_text)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—Ö –∞—Ç–∞–∫–∏
        success = not shield_result["—ç—Ç–æ_—Ñ–∏—à–∏–Ω–≥"] and ivan_result["–±—É–¥–µ—Ç_–∫–ª–∏–∫–∞—Ç—å"]
        
        return {
            "message": request.message,
            "success": success,
            "attack_result": "üöÄ –£–°–ü–ï–•!" if success else "üí• –ü–†–û–í–ê–õ",
            "shield": {
                "status": "DANGER" if shield_result["—ç—Ç–æ_—Ñ–∏—à–∏–Ω–≥"] else "SAFE",
                "decision": "‚ùå –ë–õ–û–ö–ò–†–£–ï–¢" if shield_result["—ç—Ç–æ_—Ñ–∏—à–∏–Ω–≥"] else "‚úÖ –ü–†–û–ü–£–°–ö–ê–ï–¢",
                "details": shield_result
            },
            "ivan": {
                "status": "CLICK" if ivan_result["–±—É–¥–µ—Ç_–∫–ª–∏–∫–∞—Ç—å"] else "IGNORE", 
                "decision": "‚úÖ –ö–õ–ò–ö–ù–ï–¢" if ivan_result["–±—É–¥–µ—Ç_–∫–ª–∏–∫–∞—Ç—å"] else "‚ùå –ù–ï –ö–õ–ò–ö–ù–ï–¢",
                "details": ivan_result
            },
            "api_version": "1.0.0"
        }
    except Exception as e:
        return {
            "error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}",
            "success": False,
            "message": request.message
        }

if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(
        "main:app", 
        host="0.0.0.0", 
        port=port,
        reload=False  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ—Ç–∫–ª—é—á–∞–µ–º reload
    )
